@inject IViewInventoriesByNameUseCase ViewInventoriesByNameUseCase

<div class="input-group">
    <input class="form-control"
               placeholder="Type something to search"
               @bind-value="this.searchFilter" @bind-value:event="oninput">
    </input>
    <button type="button" class="btn-success input-group-text" @onclick="HandleSearch">Search</button>
</div>

@if (inventories is not null && inventories.Count > 0)
{
    <div class="search-result">
        <ul>
            @foreach (var inv in inventories)
            {
                <li @key="inv.InventoryId"
                @onclick="() => { HandleSelectInventory(inv); }"
                >
                    @inv.InventoryName
                </li>
            }
    
        </ul>
    </div>
}


@code {
    [Parameter]
    public EventCallback<Inventory> OnInventorySelected { get; set; }

    private string _searchFilter;

    private string searchFilter
    {
        get => _searchFilter;
        set
        {
            if (_searchFilter != value)
            {
                _searchFilter = value;
                HandleSearch();
            }
        }
    }

    private List<Inventory> inventories = new List<Inventory>();

    private async Task HandleSearch()
    {
        // Simulate a search operation
        await Task.Delay(2000); // Simulating a delay for the search operation
        inventories = (await ViewInventoriesByNameUseCase.ExecuteAsync(this.searchFilter)).ToList();

        StateHasChanged(); // Refresh the UI to show the search results

    }

    private async Task HandleSelectInventory(Inventory inventory)
    {
        // Handle the selection of an inventory item
        // You can raise an event or call a method to pass the selected inventory back to the parent component
        await OnInventorySelected.InvokeAsync(inventory);
        inventories.Clear(); // Clear the search results after selection
    }

}
